##
#
# Helper functions for simulating a Valkyrie humanoid. 
#
##
import numpy as np
import time
from pydrake.all import *

def ManipulatorDynamics(plant, q, v=None):
    """
    Return manipulator dynamic quantities M, Cv, tauG, B, and tauExt,
    where

    M(q)v + C(q,v)v = tauG + Bu + tauExt.

    Adopted from http://underactuated.mit.edu/underactuated.html?chapter=intro.
    """
    assert isinstance(plant,MultibodyPlant)

    # Note that in the long term it would probably be worthwhile to create symbolic 
    # functions for these quantities.
    context = plant.CreateDefaultContext()
    plant.SetPositions(context, q)
    if v is not None:
        plant.SetVelocities(context, v)
    M = plant.CalcMassMatrixViaInverseDynamics(context)
    Cv = plant.CalcBiasTerm(context)
    tauG = plant.CalcGravityGeneralizedForces(context)
    B = plant.MakeActuationMatrix()

    # External forces assumed to be zero here
    forces = MultibodyForces(plant)
    plant.CalcForceElementsContribution(context, forces)
    tauExt = forces.generalized_forces()

    return (M, Cv, tauG, B, tauExt)


def solve_joint_accel_QP(M, Cv, tauG, B, tauExt, vd_des):
    """
    Solve a quadratic program which attempts to track the given desired
    joint accelerations vd_des. Specifically, we will return the actuator inputs u
    that solve the following optimization problem:

        min   | vd - vd_des |^2
        s.t.  M*vd + Cv = tauG + B*u + tauExt

    """

    start_time = time.time()
    # Decision variables
    mp = MathematicalProgram()
    vd = mp.NewContinuousVariables(len(vd_des),'vd')
    u = mp.NewContinuousVariables(B.shape[1],'u')

    # Cast everybody into a np.matrix or vertical numpy array so we can use python2.7's matrix
    # multiplication tools effectively. 

    M = np.matrix(M)              # pre-determinined variables
    Cv = Cv[np.newaxis].T
    tauG = tauG[np.newaxis].T
    B = np.matrix(B)
    tauExt = tauExt[np.newaxis].T
    vd_des = vd_des[np.newaxis].T

    vd = vd[np.newaxis].T         # decision variables
    u = u[np.newaxis].T

    Q = np.eye(len(vd_des))       # cost function parameters
    Q = np.matrix(Q)  

    # Add cost function to the QP
    cost = (vd_des.T-vd.T)*Q*(vd_des-vd)  # cost is a 1x1 np.matrix. We need it to be a pydrake.symbolic.Expression
    mp.AddQuadraticCost(cost[0,0])        # to use it in the mp, so we extract the first element here.

    # Add constraints to the QP
    Mvd = M*vd
    Bu = B*u
    for i in range(M.shape[0]):
        mp.AddLinearConstraint(Mvd[i,0] + Cv[i] - tauG[i] - Bu[i,0] - tauExt[i] == 0)

    # solve the QP
    result = Solve(mp)

    print(time.time() - start_time)

    return result.GetSolution(u)
    


def QP_example():
    """
    Example of using Drake to solve a quadratic program

        min   1/2x'Qx + c'x
        s.t.  Ax <= b
    """
    # Cost and constraint parameters
    Q = np.matrix([[1, -1],     # we need to use matrices and the '*' operator for
                  [-1, 2]])     # matrix multiplication so that we can multiply these mp.Variable objects,
    c = np.matrix([[-2],[-6]])  # which are numpy arrays with dtype=object, which np.matmul doesn't support.

    A = np.matrix([[1,  1],
                  [-1, 2],
                  [2,  1]])

    b = np.matrix([[2],[2],[3]])

    # Set up the problem
    mp = MathematicalProgram()
    x = mp.NewContinuousVariables(2,"x")
    x = x[np.newaxis].T         # formulate as proper (vertical) vector

    # Add the cost
    mp.AddQuadraticCost(Q,c,x)

    # Add constraints elementwise, since drake's (in)equality constraints don't seem to be able
    # to handle vector inequalities.
    Ax = A*x
    for i in range(b.shape[0]):
        Ax_i = Ax[i,0]
        mp.AddLinearConstraint(Ax[i,0] <= b[i])
  
    # Get the solution
    result = Solve(mp)
    print("Result: x = %s" % result.GetSolution(x))
    print("")
    print("Used solver [%s]" % result.get_solver_id().name())
    print("Run time %s s" % result.get_solver_details().run_time)

    return result



def list_joints_and_actuators(robot):
    """
    Run through all the joints and actuators in the robot model 
    and print their names and indeces.
    """
    for i in range(robot.num_actuators()):
        joint_actuator = robot.get_joint_actuator(JointActuatorIndex(i))
        joint = joint_actuator.joint()

        print("Actuator [%s] acts on joint [%s]" % (joint_actuator.name(),joint.name()))


def ValkyrieFixedPointState():
    """
    Return a reasonable initial state for the Valkyrie humanoid, where
    the orientation is expressed in quaternions.
    """

    q = np.zeros(37)
    q[0:4] = [1, 0, 0, 0]   # floating base orientation
    q[4:7] = [0, 0, 1.025]  # floating base position
    q[7] = 0                # spine
    q[8] = 0                # r hip
    q[9] = 0                # l hip
    q[10] = 0               # spine
    q[11] = 0               # r hip
    q[12] = 0               # l hip
    q[13] = 0               # spine
    q[14] = -0.49           # r hip
    q[15] = -0.49           # l hip
    q[16] = 0               # neck
    q[17] = 0.3             # r shoulder
    q[18] = 0.3             # l shoulder
    q[19] = 1.205           # r knee
    q[20] = 1.205           # l knee
    q[21] = 1.25            # r shoulder 
    q[22] = -1.25           # l shoulder
    q[23] = -0.71           # r ancle
    q[24] = -0.71           # l ancle
    q[25] = 0               # r elbow
    q[26] = 0               # l elbow
    q[27] = 0               # r ancle
    q[28] = 0               # l ancle
    q[29] = 0.78            # r elbow
    q[30] = -0.78           # l elbow
    q[31] = 1.571           # r wrist
    q[32] = 1.571           # l wrist
    q[33] = 0               # r wrist
    q[34] = 0               # l wrist
    q[35] = 0               # r wrist
    q[36] = 0               # l wrist

    qd = np.zeros(36)

    return np.hstack((q,qd))

def RPYValkyrieFixedPointTorque():
    """
    Return a set of torque commands that will keep the Valkyrie
    humanoid (approximately) fixed at the above initial state.
    
    Adopted from drake/examples/valkyrie/valkyrie_constants.cc.
    """
    tau = np.asarray([
      0, 54.07374714, -1.16973414,
      1.89429714, 
      
      3.778290679, -8.104844333, -1.370804286, 
      2.345797901, -0.3205054571, -0.2609708356, -0.1427544212, 
      
      3.778290679, 8.104844333, -1.370804286, 
      -2.345797901, -0.3205054571, 0.2609708356, 0.1427544212,
      
      0.0009084321844, 12.02429585, -10.18358769, -118.6322523, 52.87796422, 0.2418568986, 
      0.0009084320108, -11.43386868, -10.22606335, -116.9452938, 52.24348208, 0.2418569007])

    return tau

def ValkyrieFixedPointTorque():
    """
    Return torques that hold the robot (approximately) at the fixed position
    expressed by ValkyrieFixedPointState().
    """
    tau = np.zeros(30)
    tau[0] = 1.894    # spine
    tau[1] = 54.1    # spine
    tau[2] = -1.2    # spine
    tau[3] = 0    # l hip
    tau[4] = -11.4    # l hip
    tau[5] = 10.2    # l hip
    tau[6] = -117    # l knee
    tau[7] = 52.2    # l ancle
    tau[8] = 0.24    # l ancle
    tau[9] = 0    # r hip
    tau[10] = 12.02   # r hip 
    tau[11] = -10.2   # r hip
    tau[12] = -117   # r knee
    tau[13] = 52.9   # r ancle
    tau[14] = 0.24   # r ancle
    tau[15] = 0   # l shoulder
    tau[16] = 0   # l shoulder
    tau[17] = 0   # l shoulder
    tau[18] = 0   # l elbow
    tau[19] = 0   # l wrist
    tau[20] = 0   # l wrist
    tau[21] = 0   # l wrist
    tau[22] = 0   # r shoulder
    tau[23] = 0   # r shoulder
    tau[24] = 0   # r shoulder
    tau[25] = 0   # r elbow
    tau[26] = 0   # r wrist
    tau[27] = 0   # r wrist
    tau[28] = 0   # r wrist
    tau[29] = 0   # neck

    return tau
    

def RPYValkyrieFixedPointState():
    """
    Return a reasonable initial state for the Valkyrie humanoid. 
    Adopted from drake/examples/valkyrie/valkyrie_constants.cc.
    """
  
    # First six variables are spatial position of the floating base (x,y,z,r,p,y).
    # The next 30 variables are joint angles.
    q = np.asarray([
            0, 0, 1.025, 0, 0, 0,      \
            0, 0, 0, 0, 0.300196631343025, 1.25, 0, 0.785398163397448, \
            1.571, 0, 0, 0.300196631343025, -1.25, 0, -0.785398163397448, \
            1.571, 0, 0, 0, 0, -0.49, 1.205, -0.71, 0, 0, 0, -0.49, 1.205, -0.71, 0])
 
    # The first six variables are spatial velocities of the floating base.
    # The next 30 variables are joint velocities.
    qd = np.zeros(q.shape)

    return np.hstack((q,qd))

if __name__=="__main__":
    # DEBUGGING
    M = np.array([[ 3.13695332e+01, -3.34098053e-04,  2.21400827e+00,
         0.00000000e+00,  8.79369471e+00, -1.34877084e-01,
         5.06764031e-01,  8.52065187e-01,  8.52065187e-01,
        -7.14848521e-03,  7.13907146e+00,  7.14137104e+00,
         1.06530900e+01,  2.78722592e-01, -2.76607275e-01,
        -1.62895801e-03, -1.13144328e-01,  1.20363835e-01,
        -2.20703587e-01,  2.25503633e-01,  5.46704908e-01,
         5.39291094e-01,  1.63321613e-02, -1.77618630e-02,
         1.72335490e-01, -1.58687589e-01,  1.65771824e-01,
         1.70398380e-01, -6.83854960e-02, -6.37967121e-02,
         1.23799208e-02, -1.53581851e-02,  7.31604954e-03,
         7.41697742e-03,  2.35243238e-02,  2.35170408e-02],
       [-3.34098053e-04,  2.80504803e+01,  4.57231681e-02,
        -8.79369471e+00,  0.00000000e+00, -1.03399396e+00,
         2.73161205e-02, -6.93613499e-01,  7.09964928e-01,
         8.52366034e+00,  1.20802410e-01, -1.18687092e-01,
        -2.15118064e-03,  6.40380288e+00,  6.40380288e+00,
         1.02361892e+00,  3.21811005e-01,  3.20094681e-01,
         1.97888437e+00,  1.97888437e+00,  1.49789026e-02,
        -7.95863449e-03,  1.79380043e-01,  1.79380043e-01,
         2.34550224e-02,  2.12503020e-02,  3.98351191e-04,
         3.98351191e-04, -1.59907490e-01,  1.58820276e-01,
         4.61160803e-03,  5.29888294e-03,  1.85579423e-02,
        -1.85598253e-02,  3.46421893e-03, -3.53826290e-03],
       [ 2.21400827e+00,  4.57231681e-02,  6.09870397e+00,
         1.34877084e-01,  1.03399396e+00,  0.00000000e+00,
         4.05301205e+00,  5.74481091e-01,  5.76780676e-01,
         2.73163535e-02,  5.46538631e-01,  5.46538631e-01,
         4.61194436e-01, -1.15734961e+00,  1.17044369e+00,
        -4.30323989e-03, -1.08331901e+00,  1.08290209e+00,
        -2.91089099e-01,  2.99152984e-01, -1.37412984e-01,
        -1.49904668e-01, -2.16056492e-02,  2.34236687e-02,
        -2.17401172e-02,  1.30116899e-02, -1.72237434e-03,
        -1.74550732e-03,  2.73255864e-01,  2.75263476e-01,
        -9.79113730e-03,  8.32100336e-03, -2.25378398e-02,
        -2.25631815e-02,  2.45119857e-03,  2.42789783e-03],
       [ 0.00000000e+00, -8.79369471e+00,  1.34877084e-01,
         1.39435575e+02,  0.00000000e+00,  0.00000000e+00,
         1.19238954e-01,  1.31176157e+00, -1.32499208e+00,
         1.88538627e+01,  4.81956435e-18, -2.31784985e-18,
        -1.04334372e-18, -7.74152274e+00, -7.74152274e+00,
         1.68247779e+00, -2.93507975e+00, -2.93507975e+00,
        -2.14314585e+00, -2.14314585e+00, -2.55805584e-01,
         2.55805584e-01, -1.63499687e-01, -1.63499687e-01,
        -1.50972540e-01, -1.50972540e-01,  8.39949250e-05,
         8.39949250e-05,  6.50158959e-01, -6.50158959e-01,
        -3.97262375e-02, -3.97262375e-02, -4.77185489e-02,
         4.77185489e-02, -6.51515350e-03,  6.51515350e-03],
       [ 8.79369471e+00,  0.00000000e+00,  1.03399396e+00,
         0.00000000e+00,  1.39435575e+02,  0.00000000e+00,
        -2.24162420e+00,  1.65967427e+00,  1.65967427e+00,
        -3.75538816e-18,  9.03107300e+00,  9.03107300e+00,
        -1.72684286e+01,  3.34957484e-18, -1.46087556e-18,
        -7.96613560e-20,  1.94680278e-19,  1.94680278e-19,
         1.08444957e-18, -2.16377694e-19,  2.91867301e+00,
         2.91867301e+00,  6.37851103e-20, -3.91781521e-20,
         5.33546714e-01, -5.33546714e-01,  1.62878675e-01,
         1.62878675e-01,  1.38709135e-01,  1.38709135e-01,
         3.98240468e-02, -3.98240468e-02, -1.30655951e-02,
        -1.30655951e-02,  5.37394716e-02,  5.37394716e-02],
       [-1.34877084e-01, -1.03399396e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.39435575e+02,
        -1.02532731e-18,  1.58181720e-18,  3.24425917e-20,
         5.51796252e+00, -1.31489247e+00,  1.32812298e+00,
        -1.19238954e-01, -1.56017314e+00, -1.56017314e+00,
         1.93098587e-01,  3.88075767e-01,  3.88075767e-01,
         1.62016091e+00,  1.62016091e+00, -8.26949909e-01,
         8.26949909e-01, -1.23794065e-01, -1.23794065e-01,
        -1.38870393e-01, -1.38870393e-01,  1.67988450e-02,
         1.67988450e-02,  2.35853754e-01, -2.35853754e-01,
        -3.24958655e-02, -3.24958655e-02, -2.63612460e-02,
         2.63612460e-02, -1.45468354e-02,  1.45468354e-02],
       [ 5.06764031e-01,  2.73161205e-02,  4.05301205e+00,
         1.19238954e-01, -2.24162420e+00, -1.02532731e-18,
         4.05301205e+00,  0.00000000e+00,  0.00000000e+00,
         2.73163535e-02,  0.00000000e+00,  0.00000000e+00,
         4.61194436e-01,  0.00000000e+00,  0.00000000e+00,
        -4.30323989e-03, -1.08331901e+00,  1.08290209e+00,
         0.00000000e+00,  0.00000000e+00, -1.37412984e-01,
        -1.49904668e-01,  0.00000000e+00,  0.00000000e+00,
        -2.17401172e-02,  1.30116899e-02,  0.00000000e+00,
         0.00000000e+00,  2.73255864e-01,  2.75263476e-01,
        -9.79113730e-03,  8.32100336e-03, -2.25378398e-02,
        -2.25631815e-02,  2.45119857e-03,  2.42789783e-03],
       [ 8.52065187e-01, -6.93613499e-01,  5.74481091e-01,
         1.31176157e+00,  1.65967427e+00,  1.58181720e-18,
         0.00000000e+00,  4.41206116e-01,  0.00000000e+00,
         0.00000000e+00,  5.46538631e-01,  0.00000000e+00,
         0.00000000e+00, -3.70810901e-01,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        -7.33454810e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -4.99408100e-03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.73090823e-03,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 8.52065187e-01,  7.09964928e-01,  5.76780676e-01,
        -1.32499208e+00,  1.65967427e+00,  3.24425917e-20,
         0.00000000e+00,  0.00000000e+00,  4.42161481e-01,
         0.00000000e+00,  0.00000000e+00,  5.46538631e-01,
         0.00000000e+00,  0.00000000e+00,  3.83904979e-01,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  8.14093661e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.81210057e-03,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        -1.73697344e-03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [-7.14848521e-03,  8.52366034e+00,  2.73163535e-02,
         1.88538627e+01, -3.75538816e-18,  5.51796252e+00,
         2.73163535e-02,  0.00000000e+00,  0.00000000e+00,
         8.75491815e+00,  0.00000000e+00,  0.00000000e+00,
        -7.14848521e-03,  0.00000000e+00,  0.00000000e+00,
         1.03171168e+00,  3.38075261e-01,  3.36358936e-01,
         0.00000000e+00,  0.00000000e+00, -1.96785681e-02,
         2.66988362e-02,  0.00000000e+00,  0.00000000e+00,
         1.76349642e-02,  1.54302438e-02,  0.00000000e+00,
         0.00000000e+00, -1.50022859e-01,  1.48935646e-01,
         3.24970631e-03,  3.93698121e-03,  1.74531425e-02,
        -1.74550254e-02,  2.85456106e-03, -2.92860502e-03],
       [ 7.13907146e+00,  1.20802410e-01,  5.46538631e-01,
         4.81956435e-18,  9.03107300e+00, -1.31489247e+00,
         0.00000000e+00,  5.46538631e-01,  0.00000000e+00,
         0.00000000e+00,  5.33202056e+00,  0.00000000e+00,
         0.00000000e+00,  1.20209001e-01,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        -5.60952386e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  3.75468431e-03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.37297168e-01,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 7.14137104e+00, -1.18687092e-01,  5.46538631e-01,
        -2.31784985e-18,  9.03107300e+00,  1.32812298e+00,
         0.00000000e+00,  0.00000000e+00,  5.46538631e-01,
         0.00000000e+00,  0.00000000e+00,  5.33297592e+00,
         0.00000000e+00,  0.00000000e+00, -1.18093684e-01,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  6.08952846e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -5.18438606e-03,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.38510199e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 1.06530900e+01, -2.15118064e-03,  4.61194436e-01,
        -1.04334372e-18, -1.72684286e+01, -1.19238954e-01,
         4.61194436e-01,  0.00000000e+00,  0.00000000e+00,
        -7.14848521e-03,  0.00000000e+00,  0.00000000e+00,
         1.03025409e+01,  0.00000000e+00,  0.00000000e+00,
        -1.62895801e-03, -1.13144328e-01,  1.20363835e-01,
         0.00000000e+00,  0.00000000e+00,  6.05953970e-01,
         5.98540157e-01,  0.00000000e+00,  0.00000000e+00,
         1.83166488e-01, -1.69518588e-01,  0.00000000e+00,
         0.00000000e+00, -6.55697005e-02, -6.09809167e-02,
         1.31883490e-02, -1.61666132e-02,  7.05081796e-03,
         7.15174584e-03,  2.46152351e-02,  2.46079521e-02],
       [ 2.78722592e-01,  6.40380288e+00, -1.15734961e+00,
        -7.74152274e+00,  3.34957484e-18, -1.56017314e+00,
         0.00000000e+00, -3.70810901e-01,  0.00000000e+00,
         0.00000000e+00,  1.20209001e-01,  0.00000000e+00,
         0.00000000e+00,  4.49783999e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.45124186e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  1.39126420e-01,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  4.19030741e-04,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [-2.76607275e-01,  6.40380288e+00,  1.17044369e+00,
        -7.74152274e+00, -1.46087556e-18, -1.56017314e+00,
         0.00000000e+00,  0.00000000e+00,  3.83904979e-01,
         0.00000000e+00,  0.00000000e+00, -1.18093684e-01,
         0.00000000e+00,  0.00000000e+00,  4.49783999e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  1.45124186e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.39126420e-01,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         4.19030741e-04,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [-1.62895801e-03,  1.02361892e+00, -4.30323989e-03,
         1.68247779e+00, -7.96613560e-20,  1.93098587e-01,
        -4.30323989e-03,  0.00000000e+00,  0.00000000e+00,
         1.03171168e+00,  0.00000000e+00,  0.00000000e+00,
        -1.62895801e-03,  0.00000000e+00,  0.00000000e+00,
         4.32052678e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [-1.13144328e-01,  3.21811005e-01, -1.08331901e+00,
        -2.93507975e+00,  1.94680278e-19,  3.88075767e-01,
        -1.08331901e+00,  0.00000000e+00,  0.00000000e+00,
         3.38075261e-01,  0.00000000e+00,  0.00000000e+00,
        -1.13144328e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  1.26122198e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  8.79782885e-02,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         7.01382171e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -3.64681498e-01,  0.00000000e+00,
         1.69373275e-02,  0.00000000e+00,  3.34940594e-02,
         0.00000000e+00,  5.39062048e-03,  0.00000000e+00],
       [ 1.20363835e-01,  3.20094681e-01,  1.08290209e+00,
        -2.93507975e+00,  1.94680278e-19,  3.88075767e-01,
         1.08290209e+00,  0.00000000e+00,  0.00000000e+00,
         3.36358936e-01,  0.00000000e+00,  0.00000000e+00,
         1.20363835e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.25950566e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        -8.09580204e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  6.79334967e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  3.63594284e-01,
         0.00000000e+00,  1.76246024e-02,  0.00000000e+00,
        -3.34959423e-02,  0.00000000e+00, -5.46466444e-03],
       [-2.20703587e-01,  1.97888437e+00, -2.91089099e-01,
        -2.14314585e+00,  1.08444957e-18,  1.62016091e+00,
         0.00000000e+00, -7.33454810e-02,  0.00000000e+00,
         0.00000000e+00, -5.60952386e-02,  0.00000000e+00,
         0.00000000e+00,  1.45124186e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         9.65187588e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  5.18441885e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  3.85977824e-03,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 2.25503633e-01,  1.97888437e+00,  2.99152984e-01,
        -2.14314585e+00, -2.16377694e-19,  1.62016091e+00,
         0.00000000e+00,  0.00000000e+00,  8.14093661e-02,
         0.00000000e+00,  0.00000000e+00,  6.08952846e-02,
         0.00000000e+00,  0.00000000e+00,  1.45124186e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  9.65187588e-01,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  5.18441885e-02,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         3.85977824e-03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 5.46704908e-01,  1.49789026e-02, -1.37412984e-01,
        -2.55805584e-01,  2.91867301e+00, -8.26949909e-01,
        -1.37412984e-01,  0.00000000e+00,  0.00000000e+00,
        -1.96785681e-02,  0.00000000e+00,  0.00000000e+00,
         6.05953970e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  8.79782885e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.24410782e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         2.90832219e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  8.92967411e-04,  0.00000000e+00,
         1.62750437e-02,  0.00000000e+00, -1.85643691e-04,
         0.00000000e+00,  3.43207900e-02,  0.00000000e+00],
       [ 5.39291094e-01, -7.95863449e-03, -1.49904668e-01,
         2.55805584e-01,  2.91867301e+00,  8.26949909e-01,
        -1.49904668e-01,  0.00000000e+00,  0.00000000e+00,
         2.66988362e-02,  0.00000000e+00,  0.00000000e+00,
         5.98540157e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -8.09580204e-02,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.24071668e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -2.75214455e-01,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  4.68351016e-03,
         0.00000000e+00, -1.86858340e-02,  0.00000000e+00,
        -8.17346251e-05,  0.00000000e+00,  3.43207181e-02],
       [ 1.63321613e-02,  1.79380043e-01, -2.16056492e-02,
        -1.63499687e-01,  6.37851103e-20, -1.23794065e-01,
         0.00000000e+00, -4.99408100e-03,  0.00000000e+00,
         0.00000000e+00,  3.75468431e-03,  0.00000000e+00,
         0.00000000e+00,  1.39126420e-01,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         5.18441885e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  3.67150798e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -7.19386972e-04,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [-1.77618630e-02,  1.79380043e-01,  2.34236687e-02,
        -1.63499687e-01, -3.91781521e-20, -1.23794065e-01,
         0.00000000e+00,  0.00000000e+00,  6.81210057e-03,
         0.00000000e+00,  0.00000000e+00, -5.18438606e-03,
         0.00000000e+00,  0.00000000e+00,  1.39126420e-01,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  5.18441885e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  3.67150798e-02,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        -7.19386972e-04,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 1.72335490e-01,  2.34550224e-02, -2.17401172e-02,
        -1.50972540e-01,  5.33546714e-01, -1.38870393e-01,
        -2.17401172e-02,  0.00000000e+00,  0.00000000e+00,
         1.76349642e-02,  0.00000000e+00,  0.00000000e+00,
         1.83166488e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  7.01382171e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  2.90832219e-01,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.17908827e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -6.10610356e-03,  0.00000000e+00,
         9.84603038e-03,  0.00000000e+00,  9.83293224e-05,
         0.00000000e+00,  1.52766769e-02,  0.00000000e+00],
       [-1.58687589e-01,  2.12503020e-02,  1.30116899e-02,
        -1.50972540e-01, -5.33546714e-01, -1.38870393e-01,
         1.30116899e-02,  0.00000000e+00,  0.00000000e+00,
         1.54302438e-02,  0.00000000e+00,  0.00000000e+00,
        -1.69518588e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  6.79334967e-02,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        -2.75214455e-01,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  1.21299345e-01,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  2.65628324e-03,
         0.00000000e+00,  1.22308032e-02,  0.00000000e+00,
        -1.04252936e-04,  0.00000000e+00, -1.52768577e-02],
       [ 1.65771824e-01,  3.98351191e-04, -1.72237434e-03,
         8.39949250e-05,  1.62878675e-01,  1.67988450e-02,
         0.00000000e+00, -1.73090823e-03,  0.00000000e+00,
         0.00000000e+00,  1.37297168e-01,  0.00000000e+00,
         0.00000000e+00,  4.19030741e-04,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         3.85977824e-03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -7.19386972e-04,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.71356841e-02,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 1.70398380e-01,  3.98351191e-04, -1.74550732e-03,
         8.39949250e-05,  1.62878675e-01,  1.67988450e-02,
         0.00000000e+00,  0.00000000e+00, -1.73697344e-03,
         0.00000000e+00,  0.00000000e+00,  1.38510199e-01,
         0.00000000e+00,  0.00000000e+00,  4.19030741e-04,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  3.85977824e-03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -7.19386972e-04,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.71356841e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [-6.83854960e-02, -1.59907490e-01,  2.73255864e-01,
         6.50158959e-01,  1.38709135e-01,  2.35853754e-01,
         2.73255864e-01,  0.00000000e+00,  0.00000000e+00,
        -1.50022859e-01,  0.00000000e+00,  0.00000000e+00,
        -6.55697005e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -3.64681498e-01,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  8.92967411e-04,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        -6.10610356e-03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  1.89114793e-01,  0.00000000e+00,
        -4.50885819e-03,  0.00000000e+00, -2.17373549e-02,
         0.00000000e+00, -1.80537251e-05,  0.00000000e+00],
       [-6.37967121e-02,  1.58820276e-01,  2.75263476e-01,
        -6.50158959e-01,  1.38709135e-01, -2.35853754e-01,
         2.75263476e-01,  0.00000000e+00,  0.00000000e+00,
         1.48935646e-01,  0.00000000e+00,  0.00000000e+00,
        -6.09809167e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  3.63594284e-01,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         4.68351016e-03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  2.65628324e-03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.89115418e-01,
         0.00000000e+00,  4.44068292e-03,  0.00000000e+00,
        -2.17373708e-02,  0.00000000e+00, -9.60180609e-05],
       [ 1.23799208e-02,  4.61160803e-03, -9.79113730e-03,
        -3.97262375e-02,  3.98240468e-02, -3.24958655e-02,
        -9.79113730e-03,  0.00000000e+00,  0.00000000e+00,
         3.24970631e-03,  0.00000000e+00,  0.00000000e+00,
         1.31883490e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  1.69373275e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.62750437e-02,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         9.84603038e-03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -4.50885819e-03,  0.00000000e+00,
         7.83227337e-03,  0.00000000e+00,  1.97732852e-04,
         0.00000000e+00,  1.28006333e-04,  0.00000000e+00],
       [-1.53581851e-02,  5.29888294e-03,  8.32100336e-03,
        -3.97262375e-02, -3.98240468e-02, -3.24958655e-02,
         8.32100336e-03,  0.00000000e+00,  0.00000000e+00,
         3.93698121e-03,  0.00000000e+00,  0.00000000e+00,
        -1.61666132e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  1.76246024e-02,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        -1.86858340e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  1.22308032e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  4.44068292e-03,
         0.00000000e+00,  7.83218144e-03,  0.00000000e+00,
        -1.28866922e-04,  0.00000000e+00, -1.28185431e-04],
       [ 7.31604954e-03,  1.85579423e-02, -2.25378398e-02,
        -4.77185489e-02, -1.30655951e-02, -2.63612460e-02,
        -2.25378398e-02,  0.00000000e+00,  0.00000000e+00,
         1.74531425e-02,  0.00000000e+00,  0.00000000e+00,
         7.05081796e-03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  3.34940594e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -1.85643691e-04,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         9.83293224e-05,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -2.17373549e-02,  0.00000000e+00,
         1.97732852e-04,  0.00000000e+00,  5.73587963e-03,
         0.00000000e+00, -5.54666827e-05,  0.00000000e+00],
       [ 7.41697742e-03, -1.85598253e-02, -2.25631815e-02,
         4.77185489e-02, -1.30655951e-02,  2.63612460e-02,
        -2.25631815e-02,  0.00000000e+00,  0.00000000e+00,
        -1.74550254e-02,  0.00000000e+00,  0.00000000e+00,
         7.15174584e-03,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -3.34959423e-02,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        -8.17346251e-05,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -1.04252936e-04,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -2.17373708e-02,
         0.00000000e+00, -1.28866922e-04,  0.00000000e+00,
         5.73587963e-03,  0.00000000e+00,  2.24976359e-05],
       [ 2.35243238e-02,  3.46421893e-03,  2.45119857e-03,
        -6.51515350e-03,  5.37394716e-02, -1.45468354e-02,
         2.45119857e-03,  0.00000000e+00,  0.00000000e+00,
         2.85456106e-03,  0.00000000e+00,  0.00000000e+00,
         2.46152351e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  5.39062048e-03,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00,  3.43207900e-02,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         1.52766769e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -1.80537251e-05,  0.00000000e+00,
         1.28006333e-04,  0.00000000e+00, -5.54666827e-05,
         0.00000000e+00,  4.93420129e-03,  0.00000000e+00],
       [ 2.35170408e-02, -3.53826290e-03,  2.42789783e-03,
         6.51515350e-03,  5.37394716e-02,  1.45468354e-02,
         2.42789783e-03,  0.00000000e+00,  0.00000000e+00,
        -2.92860502e-03,  0.00000000e+00,  0.00000000e+00,
         2.46079521e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -5.46466444e-03,
         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
         3.43207181e-02,  0.00000000e+00,  0.00000000e+00,
         0.00000000e+00, -1.52768577e-02,  0.00000000e+00,
         0.00000000e+00,  0.00000000e+00, -9.60180609e-05,
         0.00000000e+00, -1.28185431e-04,  0.00000000e+00,
         2.24976359e-05,  0.00000000e+00,  4.93429321e-03]])


    Cv = np.array([ 3.96605702e-32,  1.62062692e-31, -3.23159115e-32, -1.00783387e-31,
        7.91811352e-32,  8.99900095e-31,  3.85396665e-33, -2.35497318e-32,
        8.80243935e-33,  6.33507287e-32, -4.31516571e-32,  5.28285365e-32,
        1.86614300e-32,  8.55641376e-32, -3.87064168e-32,  6.46119778e-33,
        1.78596469e-33, -1.49415763e-33,  6.50316371e-32,  4.21730806e-32,
        3.54403353e-33,  3.75784780e-32, -1.30407093e-33, -6.51821382e-33,
        2.69908315e-33, -9.94797654e-33,  5.38347293e-34,  1.18302243e-33,
        5.67847129e-33, -4.84928499e-33, -1.47512017e-35, -4.56087572e-34,
       -1.08084307e-33,  8.77976587e-34,  9.51313915e-34,  1.47131815e-33])

    tauG = np.array([ 1.32314420e+00,  1.01434808e+01,  3.23159115e-32,  1.00783387e-31,
       -7.91811352e-32, -1.36786299e+03,  1.00584609e-17, -1.55176267e-17,
       -3.18261825e-19, -5.41312123e+01,  1.28990951e+01, -1.30288864e+01,
        1.16973414e+00,  1.53052985e+01,  1.53052985e+01, -1.89429714e+00,
       -3.80702327e+00, -3.80702327e+00, -1.58937785e+01, -1.58937785e+01,
        8.11237861e+00, -8.11237861e+00,  1.21441977e+00,  1.21441977e+00,
        1.36231856e+00,  1.36231856e+00, -1.64796670e-01, -1.64796670e-01,
       -2.31372532e+00,  2.31372532e+00,  3.18784441e-01,  3.18784441e-01,
        2.58603823e-01, -2.58603823e-01,  1.42704456e-01, -1.42704456e-01])

    B = np.array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.]])

    tauExt = np.array([ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        0.00000000e+00,  0.00000000e+00,  4.91005295e-18,  1.15686208e-17,
        1.20367355e-18, -4.89735219e-20,  1.09239363e-17,  1.20545568e-17,
        1.09999647e-17,  1.93559261e-17,  2.32228575e-17, -1.88409055e-18,
       -9.06859772e-18, -1.50221208e-17, -3.85169739e-17, -4.62865037e-17,
        4.49206449e-18, -4.47608549e-18,  1.04276372e-17,  1.28605221e-17,
        6.55153897e-18,  2.08765837e-17,  3.54521789e-18, -1.67347049e-17,
       -3.76290321e-17,  3.82923255e-17,  1.78227989e-17,  4.51772280e-18,
       -5.53137659e-17,  9.53584851e-18, -3.46143594e-17,  4.15160420e-17])

    vd_des = np.zeros(M.shape[0])

    solve_joint_accel_QP(M, Cv, tauG, B, tauExt, vd_des)
